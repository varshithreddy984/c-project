#include <iostream>
#include <string>
#include <fstream>
#include <limits>

const int MAX_TRANSACTIONS = 100;

struct Transaction {
    std::string description;
    double amount;
};

class FinanceTracker {
private:
    Transaction transactions[MAX_TRANSACTIONS];
    int transactionCount;
    double balance;
    double savingsGoal;

public:
    FinanceTracker() : transactionCount(0), balance(0), savingsGoal(0) {}

    void addTransaction(const std::string& description, double amount) {
        if (transactionCount < MAX_TRANSACTIONS) {
            transactions[transactionCount].description = description;
            transactions[transactionCount].amount = amount;
            transactionCount++;
            balance += amount;
        } else {
            std::cout << "Transaction limit reached. Cannot add more transactions.\n";
        }
    }

    void showTransactions() const {
        std::cout << "Transaction History:\n";
        for (int i = 0; i < transactionCount; ++i) {
            std::cout << "[" << i + 1 << "] ";
            std::cout << transactions[i].description << ": ";
            std::cout << (transactions[i].amount >= 0 ? "+" : "-") << "$";
            std::cout << std::abs(transactions[i].amount) << "\n";
        }
    }

    double getBalance() const {
        return balance;
    }

    int getTransactionCount() const {
        return transactionCount;
    }

    double getSavingsGoal() const {
        return savingsGoal;
    }

    void setSavingsGoal(double goal) {
        savingsGoal = goal;
    }

    bool checkSavingsGoalReached() {
        return balance <= savingsGoal;
    }

    void saveTransactionsToFile() {
        std::ofstream outfile("transactions.txt");
        for (int i = 0; i < transactionCount; ++i) {
            outfile << transactions[i].description << " " << transactions[i].amount << "\n";
        }
        outfile.close();
    }
};

int main() {
    std::string userName;
    std::cout << "Welcome to the Finance Tracker!\n";
    std::cout << "Please enter your name: ";
    std::getline(std::cin, userName);

    FinanceTracker tracker;

    // Load previous transactions from file (if available)
    std::ifstream file("transactions.txt");
    if (file.is_open()) {
        while (!file.eof()) {
            std::string description;
            double amount;
            file >> description >> amount;
            tracker.addTransaction(description, amount);
        }
        file.close();
    }

    while (true) {
        std::cout << "\nHello, " << userName << "! What would you like to do?\n";
        std::cout << "1. Add income\n";
        std::cout << "2. Add expense\n";
        std::cout << "3. Show transactions\n";
        std::cout << "4. Show balance\n";
        std::cout << "5. Set savings goal\n";
        std::cout << "6. Exit\n";
        std::cout << "Choose an option: ";

        int choice;
        if (!(std::cin >> choice)) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Invalid input. Please enter a numeric choice.\n";
            continue;
        }

        switch (choice) {
            case 1: {
                std::cout << "Enter income description: ";
                std::string incomeDesc;
                std::cin.ignore();
                std::getline(std::cin, incomeDesc);
                std::cout << "Enter income amount: $";
                double incomeAmount;
                std::cin >> incomeAmount;
                tracker.addTransaction(incomeDesc, incomeAmount);
                break;
            }

            case 2: {
                std::cout << "Enter expense description: ";
                std::string expenseDesc;
                std::cin.ignore();
                std::getline(std::cin, expenseDesc);
                std::cout << "Enter expense amount: $";
                double expenseAmount;
                std::cin >> expenseAmount;

                if (expenseAmount > tracker.getBalance()) {
                    std::cout << "Warning: Expenses exceed income. Transaction not allowed.\n";
                } else {
                    tracker.addTransaction(expenseDesc, -expenseAmount);
                }

                if (tracker.checkSavingsGoalReached()) {
                    std::cout << "Warning: Expenses have exceeded your savings goal.\n";
                }
                break;
            }

            case 3: {
                tracker.showTransactions();
                break;
            }

            case 4: {
                std::cout << "Your current balance is: $" << tracker.getBalance() << "\n";
                break;
            }

            case 5: {
                std::cout << "Enter your savings goal: $";
                double savingsGoal;
                std::cin >> savingsGoal;
                tracker.setSavingsGoal(savingsGoal);
                break;
            }

            case 6: {
                tracker.saveTransactionsToFile();
                std::cout << "Exiting the finance tracker.\n";
                return 0;
            }

            default: {
                std::cout << "Invalid option. Please try again.\n";
                break;
            }
        }
    }

    return 0;
}